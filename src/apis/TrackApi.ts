/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LanguageEnum,
  PublishedFilter,
  TrackModel,
  TrackSubtype,
  TranscriptionSegment,
} from '../models/index';
import {
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    PublishedFilterFromJSON,
    PublishedFilterToJSON,
    TrackModelFromJSON,
    TrackModelToJSON,
    TrackSubtypeFromJSON,
    TrackSubtypeToJSON,
    TranscriptionSegmentFromJSON,
    TranscriptionSegmentToJSON,
} from '../models/index';

export interface TrackGetRequest {
    size?: number;
    from?: number;
    contentType?: Array<TrackSubtype>;
    publishedFilter?: PublishedFilter;
    tags?: Array<string>;
    excludeTags?: Array<string>;
    language?: LanguageEnum;
    hasTranscription?: boolean;
    oneOfPolicies?: Array<string>;
    contentType2?: Array<TrackSubtype>;
    tags2?: Array<string>;
    excludeTags2?: Array<string>;
}

export interface TrackIdGetRequest {
    id: number;
    unpublished?: PublishedFilter;
}

export interface TrackIdTranscriptionGetRequest {
    id: number;
    unpublished?: PublishedFilter;
}

export interface TrackIdTranscriptionLanguageGetRequest {
    id: number;
    language: LanguageEnum;
    unpublished?: PublishedFilter;
}

export interface TrackIdTranscriptionLanguagePostRequest {
    id: number;
    language: LanguageEnum;
    transcriptionSegment: Array<TranscriptionSegment>;
}

/**
 * 
 */
export class TrackApi extends runtime.BaseAPI {

    /**
     */
    async trackGetRaw(requestParameters: TrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        const queryParameters: any = {};

        if (requestParameters.size !== undefined) {
            queryParameters['Size'] = requestParameters.size;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['From'] = requestParameters.from;
        }

        if (requestParameters.contentType) {
            queryParameters['ContentType'] = requestParameters.contentType;
        }

        if (requestParameters.publishedFilter !== undefined) {
            queryParameters['PublishedFilter'] = requestParameters.publishedFilter;
        }

        if (requestParameters.tags) {
            queryParameters['Tags'] = requestParameters.tags;
        }

        if (requestParameters.excludeTags) {
            queryParameters['ExcludeTags'] = requestParameters.excludeTags;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['Language'] = requestParameters.language;
        }

        if (requestParameters.hasTranscription !== undefined) {
            queryParameters['HasTranscription'] = requestParameters.hasTranscription;
        }

        if (requestParameters.oneOfPolicies) {
            queryParameters['OneOfPolicies'] = requestParameters.oneOfPolicies;
        }

        if (requestParameters.contentType2) {
            queryParameters['content-type'] = requestParameters.contentType2;
        }

        if (requestParameters.tags2) {
            queryParameters['tags'] = requestParameters.tags2;
        }

        if (requestParameters.excludeTags2) {
            queryParameters['exclude-tags'] = requestParameters.excludeTags2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async trackGet(requestParameters: TrackGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.trackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdGetRaw(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackModelFromJSON(jsonValue));
    }

    /**
     */
    async trackIdGet(requestParameters: TrackIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackModel> {
        const response = await this.trackIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdTranscriptionGetRaw(requestParameters: TrackIdTranscriptionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TranscriptionSegment>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdTranscriptionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}/transcription`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TranscriptionSegmentFromJSON));
    }

    /**
     */
    async trackIdTranscriptionGet(requestParameters: TrackIdTranscriptionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TranscriptionSegment>> {
        const response = await this.trackIdTranscriptionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdTranscriptionLanguageGetRaw(requestParameters: TrackIdTranscriptionLanguageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TranscriptionSegment>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdTranscriptionLanguageGet.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling trackIdTranscriptionLanguageGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/{id}/transcription/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TranscriptionSegmentFromJSON));
    }

    /**
     */
    async trackIdTranscriptionLanguageGet(requestParameters: TrackIdTranscriptionLanguageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TranscriptionSegment>> {
        const response = await this.trackIdTranscriptionLanguageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackIdTranscriptionLanguagePostRaw(requestParameters: TrackIdTranscriptionLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdTranscriptionLanguagePost.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling trackIdTranscriptionLanguagePost.');
        }

        if (requestParameters.transcriptionSegment === null || requestParameters.transcriptionSegment === undefined) {
            throw new runtime.RequiredError('transcriptionSegment','Required parameter requestParameters.transcriptionSegment was null or undefined when calling trackIdTranscriptionLanguagePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/track/{id}/transcription/{language}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transcriptionSegment.map(TranscriptionSegmentToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackIdTranscriptionLanguagePost(requestParameters: TrackIdTranscriptionLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackIdTranscriptionLanguagePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async trackRecommendationFraKaareGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/recommendation/fra-kaare`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async trackRecommendationFraKaareGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.trackRecommendationFraKaareGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async trackRecommendationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/recommendation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async trackRecommendationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.trackRecommendationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async trackTranscribeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track/transcribe`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async trackTranscribeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.trackTranscribeGetRaw(initOverrides);
        return await response.value();
    }

}
