/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTrackCollectionCommand,
  GetTopSongsCollectionModel,
  GetTrackCollectionModel,
  ProblemDetails,
  TrackCollectionDetails,
  UpdateTrackCollectionCommand,
} from '../models/index';
import {
    CreateTrackCollectionCommandFromJSON,
    CreateTrackCollectionCommandToJSON,
    GetTopSongsCollectionModelFromJSON,
    GetTopSongsCollectionModelToJSON,
    GetTrackCollectionModelFromJSON,
    GetTrackCollectionModelToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TrackCollectionDetailsFromJSON,
    TrackCollectionDetailsToJSON,
    UpdateTrackCollectionCommandFromJSON,
    UpdateTrackCollectionCommandToJSON,
} from '../models/index';

export interface TrackCollectionIdAlbumAlbumIdPostRequest {
    id: number;
    albumId: number;
}

export interface TrackCollectionIdDeleteRequest {
    id: number;
}

export interface TrackCollectionIdGetRequest {
    id: number;
}

export interface TrackCollectionIdPlaylistPlaylistIdPostRequest {
    id: number;
    playlistId: number;
}

export interface TrackCollectionIdPostRequest {
    id: number;
    link?: Array<string>;
}

export interface TrackCollectionIdPutRequest {
    id: number;
    updateTrackCollectionCommand?: UpdateTrackCollectionCommand;
}

export interface TrackCollectionIdResetSharePostRequest {
    id: number;
}

export interface TrackCollectionIdTrackCollectionPlaylistIdPostRequest {
    id: number;
    playlistId: number;
}

export interface TrackCollectionIdUnfollowPostRequest {
    id: number;
}

export interface TrackCollectionLikePostRequest {
    link?: Array<string>;
}

export interface TrackCollectionPostRequest {
    createTrackCollectionCommand?: CreateTrackCollectionCommand;
}

export interface TrackCollectionUnlikePostRequest {
    link?: Array<string>;
}

export interface TrackCollectionIdDownloadGetRequest {
    id: number;
}

/**
 * 
 */
export class TrackCollectionApi extends runtime.BaseAPI {

    /**
     * Get a list of track collections for the current user.
     */
    async trackCollectionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackCollectionDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackCollectionDetailsFromJSON));
    }

    /**
     * Get a list of track collections for the current user.
     */
    async trackCollectionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackCollectionDetails>> {
        const response = await this.trackCollectionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async trackCollectionIdAlbumAlbumIdPostRaw(requestParameters: TrackCollectionIdAlbumAlbumIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdAlbumAlbumIdPost.');
        }

        if (requestParameters.albumId === null || requestParameters.albumId === undefined) {
            throw new runtime.RequiredError('albumId','Required parameter requestParameters.albumId was null or undefined when calling trackCollectionIdAlbumAlbumIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/album/{albumId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"albumId"}}`, encodeURIComponent(String(requestParameters.albumId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionIdAlbumAlbumIdPost(requestParameters: TrackCollectionIdAlbumAlbumIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdAlbumAlbumIdPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async trackCollectionIdDeleteRaw(requestParameters: TrackCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionIdDelete(requestParameters: TrackCollectionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single track collection. All hidden or deleted tracks will not show up in this list if the user added them once.
     */
    async trackCollectionIdGetRaw(requestParameters: TrackCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTrackCollectionModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTrackCollectionModelFromJSON(jsonValue));
    }

    /**
     * Get a single track collection. All hidden or deleted tracks will not show up in this list if the user added them once.
     */
    async trackCollectionIdGet(requestParameters: TrackCollectionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTrackCollectionModel> {
        const response = await this.trackCollectionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackCollectionIdPlaylistPlaylistIdPostRaw(requestParameters: TrackCollectionIdPlaylistPlaylistIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdPlaylistPlaylistIdPost.');
        }

        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling trackCollectionIdPlaylistPlaylistIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/playlist/{playlistId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionIdPlaylistPlaylistIdPost(requestParameters: TrackCollectionIdPlaylistPlaylistIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdPlaylistPlaylistIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Add tracks to existing track collection without changing anything else
     */
    async trackCollectionIdPostRaw(requestParameters: TrackCollectionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.link) {
            headerParameters['link'] = requestParameters.link.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const response = await this.request({
            path: `/track_collection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add tracks to existing track collection without changing anything else
     */
    async trackCollectionIdPost(requestParameters: TrackCollectionIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Edit an existing track collection
     */
    async trackCollectionIdPutRaw(requestParameters: TrackCollectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/track_collection/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTrackCollectionCommandToJSON(requestParameters.updateTrackCollectionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Edit an existing track collection
     */
    async trackCollectionIdPut(requestParameters: TrackCollectionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the sharing link and removes all followers of the track collection
     */
    async trackCollectionIdResetSharePostRaw(requestParameters: TrackCollectionIdResetSharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdResetSharePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/reset-share`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the sharing link and removes all followers of the track collection
     */
    async trackCollectionIdResetSharePost(requestParameters: TrackCollectionIdResetSharePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdResetSharePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async trackCollectionIdTrackCollectionPlaylistIdPostRaw(requestParameters: TrackCollectionIdTrackCollectionPlaylistIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdTrackCollectionPlaylistIdPost.');
        }

        if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
            throw new runtime.RequiredError('playlistId','Required parameter requestParameters.playlistId was null or undefined when calling trackCollectionIdTrackCollectionPlaylistIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/track_collection/{playlistId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"playlistId"}}`, encodeURIComponent(String(requestParameters.playlistId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionIdTrackCollectionPlaylistIdPost(requestParameters: TrackCollectionIdTrackCollectionPlaylistIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdTrackCollectionPlaylistIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Unfollows a track collection
     */
    async trackCollectionIdUnfollowPostRaw(requestParameters: TrackCollectionIdUnfollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdUnfollowPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/unfollow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unfollows a track collection
     */
    async trackCollectionIdUnfollowPost(requestParameters: TrackCollectionIdUnfollowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionIdUnfollowPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async trackCollectionLikePostRaw(requestParameters: TrackCollectionLikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.link) {
            headerParameters['link'] = requestParameters.link.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const response = await this.request({
            path: `/track_collection/like`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionLikePost(requestParameters: TrackCollectionLikePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionLikePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a track collection
     */
    async trackCollectionPostRaw(requestParameters: TrackCollectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/track_collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTrackCollectionCommandToJSON(requestParameters.createTrackCollectionCommand),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a track collection
     */
    async trackCollectionPost(requestParameters: TrackCollectionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.trackCollectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async trackCollectionTopSongsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTopSongsCollectionModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/top-songs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTopSongsCollectionModelFromJSON(jsonValue));
    }

    /**
     */
    async trackCollectionTopSongsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTopSongsCollectionModel> {
        const response = await this.trackCollectionTopSongsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async trackCollectionTopSongsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/top-songs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async trackCollectionTopSongsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.trackCollectionTopSongsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async trackCollectionUnlikePostRaw(requestParameters: TrackCollectionUnlikePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.link) {
            headerParameters['link'] = requestParameters.link.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const response = await this.request({
            path: `/track_collection/unlike`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trackCollectionUnlikePost(requestParameters: TrackCollectionUnlikePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackCollectionUnlikePostRaw(requestParameters, initOverrides);
    }

        /**
     * Download a track collection
     */
    async trackCollectionIdDownloadGetRaw(requestParameters: TrackCollectionIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackCollectionIdDownloadGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/track_collection/{id}/download`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a track collection
     */
    async trackCollectionIdDownloadGet(requestParameters: TrackCollectionIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.trackCollectionIdDownloadGetRaw(requestParameters, initOverrides);
        return await response.value();
    }    

}
