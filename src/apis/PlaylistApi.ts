/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentListIAllDocumentModels,
  LanguageEnum,
  PlaylistDetailsModel,
  PlaylistModel,
  PublishedFilter,
  TrackModel,
} from '../models/index';
import {
    DocumentListIAllDocumentModelsFromJSON,
    DocumentListIAllDocumentModelsToJSON,
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
    PlaylistDetailsModelFromJSON,
    PlaylistDetailsModelToJSON,
    PlaylistModelFromJSON,
    PlaylistModelToJSON,
    PublishedFilterFromJSON,
    PublishedFilterToJSON,
    TrackModelFromJSON,
    TrackModelToJSON,
} from '../models/index';

export interface PlaylistDocumentsGetRequest {
    lang?: LanguageEnum;
    age?: number;
}

export interface PlaylistIdCoverGetRequest {
    id: number;
}

export interface PlaylistIdDetailsGetRequest {
    id: number;
}

export interface PlaylistIdGetRequest {
    id: number;
}

export interface PlaylistIdTrackGetRequest {
    id: number;
    unpublished?: PublishedFilter;
}

/**
 * 
 */
export class PlaylistApi extends runtime.BaseAPI {

    /**
     */
    async playlistDocumentsGetRaw(requestParameters: PlaylistDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListIAllDocumentModels>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.age !== undefined) {
            queryParameters['age'] = requestParameters.age;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListIAllDocumentModelsFromJSON(jsonValue));
    }

    /**
     */
    async playlistDocumentsGet(requestParameters: PlaylistDocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListIAllDocumentModels> {
        const response = await this.playlistDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of playlists.  The apps use this endpoint to load single playlists as well (as optimization)
     */
    async playlistGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlaylistModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistModelFromJSON));
    }

    /**
     * List of playlists.  The apps use this endpoint to load single playlists as well (as optimization)
     */
    async playlistGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlaylistModel>> {
        const response = await this.playlistGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistIdCoverGetRaw(requestParameters: PlaylistIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdCoverGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}/cover`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistIdCoverGet(requestParameters: PlaylistIdCoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.playlistIdCoverGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async playlistIdDetailsGetRaw(requestParameters: PlaylistIdDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistDetailsModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdDetailsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}/details`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistDetailsModelFromJSON(jsonValue));
    }

    /**
     */
    async playlistIdDetailsGet(requestParameters: PlaylistIdDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistDetailsModel> {
        const response = await this.playlistIdDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistIdGetRaw(requestParameters: PlaylistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaylistModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaylistModelFromJSON(jsonValue));
    }

    /**
     */
    async playlistIdGet(requestParameters: PlaylistIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaylistModel> {
        const response = await this.playlistIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async playlistIdTrackGetRaw(requestParameters: PlaylistIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playlistIdTrackGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.unpublished !== undefined) {
            queryParameters['unpublished'] = requestParameters.unpublished;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/playlist/{id}/track`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackModelFromJSON));
    }

    /**
     */
    async playlistIdTrackGet(requestParameters: PlaylistIdTrackGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackModel>> {
        const response = await this.playlistIdTrackGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
