/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DiscoverCollection,
  IAllDocumentModels,
  LanguageEnum,
} from '../models/index';
import {
    DiscoverCollectionFromJSON,
    DiscoverCollectionToJSON,
    IAllDocumentModelsFromJSON,
    IAllDocumentModelsToJSON,
    LanguageEnumFromJSON,
    LanguageEnumToJSON,
} from '../models/index';

export interface DiscoverCarplayGetRequest {
    lang?: LanguageEnum;
    theme?: string;
}

export interface DiscoverGetRequest {
    lang?: LanguageEnum;
    age?: number;
    theme?: string;
}

export interface DiscoverRawCarplayHomePostRequest {
    discoverCollection?: DiscoverCollection;
}

export interface DiscoverRawDiscoverCollectionPostRequest {
    discoverCollection?: DiscoverCollection;
}

export interface DiscoverRawPlaylistDocumentsPostRequest {
    discoverCollection?: DiscoverCollection;
}

/**
 * 
 */
export class DiscoverApi extends runtime.BaseAPI {

    /**
     */
    async discoverCarplayGetRaw(requestParameters: DiscoverCarplayGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IAllDocumentModels>>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.theme !== undefined) {
            queryParameters['theme'] = requestParameters.theme;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover/carplay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IAllDocumentModelsFromJSON));
    }

    /**
     */
    async discoverCarplayGet(requestParameters: DiscoverCarplayGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IAllDocumentModels>> {
        const response = await this.discoverCarplayGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverGetRaw(requestParameters: DiscoverGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IAllDocumentModels>>> {
        const queryParameters: any = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.age !== undefined) {
            queryParameters['age'] = requestParameters.age;
        }

        if (requestParameters.theme !== undefined) {
            queryParameters['theme'] = requestParameters.theme;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IAllDocumentModelsFromJSON));
    }

    /**
     */
    async discoverGet(requestParameters: DiscoverGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IAllDocumentModels>> {
        const response = await this.discoverGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverRawCarplayHomeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover/raw/carplay_home`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverCollectionFromJSON(jsonValue));
    }

    /**
     */
    async discoverRawCarplayHomeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverCollection> {
        const response = await this.discoverRawCarplayHomeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverRawCarplayHomePostRaw(requestParameters: DiscoverRawCarplayHomePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Discover/raw/carplay_home`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoverCollectionToJSON(requestParameters.discoverCollection),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async discoverRawCarplayHomePost(requestParameters: DiscoverRawCarplayHomePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoverRawCarplayHomePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discoverRawDiscoverCollectionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover/raw/discover_collection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverCollectionFromJSON(jsonValue));
    }

    /**
     */
    async discoverRawDiscoverCollectionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverCollection> {
        const response = await this.discoverRawDiscoverCollectionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverRawDiscoverCollectionPostRaw(requestParameters: DiscoverRawDiscoverCollectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Discover/raw/discover_collection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoverCollectionToJSON(requestParameters.discoverCollection),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async discoverRawDiscoverCollectionPost(requestParameters: DiscoverRawDiscoverCollectionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoverRawDiscoverCollectionPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discoverRawGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover/raw`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverCollectionFromJSON(jsonValue));
    }

    /**
     */
    async discoverRawGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverCollection> {
        const response = await this.discoverRawGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverRawPlaylistDocumentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoverCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Discover/raw/playlist_documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscoverCollectionFromJSON(jsonValue));
    }

    /**
     */
    async discoverRawPlaylistDocumentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoverCollection> {
        const response = await this.discoverRawPlaylistDocumentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async discoverRawPlaylistDocumentsPostRaw(requestParameters: DiscoverRawPlaylistDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Discover/raw/playlist_documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscoverCollectionToJSON(requestParameters.discoverCollection),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async discoverRawPlaylistDocumentsPost(requestParameters: DiscoverRawPlaylistDocumentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discoverRawPlaylistDocumentsPostRaw(requestParameters, initOverrides);
    }

}
