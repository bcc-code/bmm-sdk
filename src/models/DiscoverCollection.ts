/* tslint:disable */
/* eslint-disable */
/**
 * BMM Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DiscoverCollectionElement } from './DiscoverCollectionElement';
import {
    DiscoverCollectionElementFromJSON,
    DiscoverCollectionElementFromJSONTyped,
    DiscoverCollectionElementToJSON,
} from './DiscoverCollectionElement';

/**
 * 
 * @export
 * @interface DiscoverCollection
 */
export interface DiscoverCollection {
    /**
     * 
     * @type {string}
     * @memberof DiscoverCollection
     */
    type?: string | null;
    /**
     * 
     * @type {Array<DiscoverCollectionElement>}
     * @memberof DiscoverCollection
     */
    documents?: Array<DiscoverCollectionElement> | null;
}

/**
 * Check if a given object implements the DiscoverCollection interface.
 */
export function instanceOfDiscoverCollection(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DiscoverCollectionFromJSON(json: any): DiscoverCollection {
    return DiscoverCollectionFromJSONTyped(json, false);
}

export function DiscoverCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiscoverCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'documents': !exists(json, 'documents') ? undefined : (json['documents'] === null ? null : (json['documents'] as Array<any>).map(DiscoverCollectionElementFromJSON)),
    };
}

export function DiscoverCollectionToJSON(value?: DiscoverCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'documents': value.documents === undefined ? undefined : (value.documents === null ? null : (value.documents as Array<any>).map(DiscoverCollectionElementToJSON)),
    };
}

